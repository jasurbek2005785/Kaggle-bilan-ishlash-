# -*- coding: utf-8 -*-
"""Google Stock Analysis and Prediction 20042024

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/google-stock-analysis-and-prediction-20042024-6730835b-1da6-42e8-bd15-276d2930190d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241224/auto/storage/goog4_request%26X-Goog-Date%3D20241224T145247Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D8d101904e0d09ea984c3435f136d28368403b0966fba4af5e1d20ca9af24452c83c092f7b0e663fdbd93ad00e84ab660de3d1d79f9b35777a44fba7b713a39c0b7b1d3e6eb26af66130434254b833475f7f2968d9e800d27da5e9c57b52b413715f52323031022a7b9de1e2a71750ebee8465a5f6a78070d5543d4aa8fbf3608fc5e87ba308d051b1b1a83ce292e3d66ae9a73e5db856813a75db11e34b545c41b76a6c534a9a0f184c53ba1a4e338f4e959516b7218a04aac1256b5f0cf89f676754090cbc827293ea38add3d73ed103ef18108463aa55dbc85f14f579de34fca67c41486a92d175d1ba995526b5e066693eec9b2f1a2d2bc30d13c21f8e555
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
umerhaddii_google_stock_data_2024_path = kagglehub.dataset_download('umerhaddii/google-stock-data-2024')

print('Data source import complete.')

"""<div style="text-align:center; border-radius:15px; padding:15px; color:white; margin:0; font-family: 'Orbitron', sans-serif; background: #2E0249; background: #11001C; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3); overflow:hidden; margin-bottom: 1em;"><div style="font-size:150%; color:#FEE100"><b>Google Stock Data Analysis: 2004-2024</b></div><div>This notebook was created with the help of <a href="https://devra.ai/ref/kaggle" style="color:#6666FF">Devra AI data science assistant</a></div></div>

Google's stock has been a fascinating journey since its IPO in 2004. From humble beginnings to becoming one of the most valuable companies in the world, analyzing its stock data can provide insights into market trends, investor behavior, and economic shifts over two decades.

In this notebook, we will dive deep into Google's stock data from 2004 to 2024, exploring various aspects of its performance and attempting to predict future trends. If you find this notebook useful, please consider upvoting it.

# Table of Contents
- [Data Loading](#Data-Loading)
- [Data Cleaning and Preprocessing](#Data-Cleaning-and-Preprocessing)
- [Exploratory Data Analysis](#Exploratory-Data-Analysis)
- [Feature Engineering](#Feature-Engineering)
- [Predictive Modeling](#Predictive-Modeling)
- [Model Evaluation](#Model-Evaluation)
- [Discussion and Future Work](#Discussion-and-Future-Work)

# Data Loading
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import warnings
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.inspection import permutation_importance

warnings.filterwarnings('ignore')
# %matplotlib inline

# Load the data
file_path = '/kaggle/input/google-stock-data-2024/GOOGL_2004-08-01_2024-12-18.csv'
df = pd.read_csv(file_path)
df.head()

"""# Data Cleaning and Preprocessing"""

# Convert 'Date' to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Check for missing values
df.isnull().sum()

"""# Exploratory Data Analysis"""

# Plotting the closing price over time
plt.figure(figsize=(14, 7))
sns.lineplot(x='Date', y='Close', data=df)
plt.title('Google Stock Closing Price (2004-2024)')
plt.xlabel('Year')
plt.ylabel('Closing Price')
plt.show()

# Correlation heatmap
numeric_df = df.select_dtypes(include=[np.number])
plt.figure(figsize=(10, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

"""# Feature Engineering"""

# Create additional features
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day
df['DayOfWeek'] = df['Date'].dt.dayofweek

# Calculate daily price change
df['Daily_Change'] = df['Close'] - df['Open']

df.head()

"""# Predictive Modeling"""

# Define features and target
features = ['Open', 'High', 'Low', 'Adj Close', 'Volume', 'Year', 'Month', 'Day', 'DayOfWeek']
target = 'Close'

# Split the data
X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""# Model Evaluation"""

# Predict and evaluate
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Permutation importance
perm_importance = permutation_importance(model, X_test, y_test, n_repeats=30, random_state=42)
sorted_idx = perm_importance.importances_mean.argsort()

plt.figure(figsize=(10, 6))
plt.barh(X.columns[sorted_idx], perm_importance.importances_mean[sorted_idx])
plt.xlabel('Permutation Importance')
plt.title('Feature Importance')
plt.show()

"""# Discussion and Future Work

In this notebook, we explored Google's stock data over a 20-year period, engineered features, and built a predictive model using a Random Forest Regressor. The model's performance, as indicated by the R-squared value, suggests a reasonable fit, though there is always room for improvement.

Future work could involve exploring more sophisticated models, such as LSTM networks for time series prediction, or incorporating external data sources like economic indicators or news sentiment analysis to enhance predictive power.

If you found this notebook insightful, please consider upvoting it.

## Credits
This notebook was created with the help of [Devra AI data science assistant](https://devra.ai/ref/kaggle)
"""